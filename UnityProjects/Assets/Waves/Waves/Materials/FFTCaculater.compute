// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InitFFTWaves
#pragma kernel HorizontalFFT
#pragma kernel VerticalFFT

struct InitElement {
	float2 HeightTilde0;
	float2 HeightTilde0Conjugate;
};

struct CaculateElement {
	float2 CaculateData[5];
};

StructuredBuffer<InitElement> InitBuff;
StructuredBuffer<uint> FFTRevertedIndexCache;
RWStructuredBuffer<CaculateElement> OutputBuff;

static float PI = 3.1416f;
static float PIMul2 = 6.2832f;
static float _Gravity = 9.81f;
static float _Eplision = 0.000001f;

uniform int _Dimension = 1;
uniform int _Log2N = 1;
uniform float _WaveLength = 1.0f;
uniform float _Omega0 = 1.0f;
uniform float _CurrentTime = 0;

float caculateOmegaFunc(float2 k) {
	return sqrt(_Gravity * length(k));

	//return floor(sqrt(_Gravity * length(k)) / _Omega0) * _Omega0;
}

float2 caculateExpXAndN(int pValue, int pHeightM) {
	return float2(cos(PIMul2 * pValue / pHeightM), sin(PIMul2 * pValue / pHeightM));
}

float2 caculateHTildeFunc(float omigaX, float omigaZ, int pXPrime, int pZPrime, float t) {
	int index = pZPrime * _Dimension + pXPrime;
	float2 h0tilde_k = InitBuff[index].HeightTilde0;
	float2 h0tilde_k_conj = InitBuff[index].HeightTilde0Conjugate;

	float o_kt = caculateOmegaFunc(float2(omigaX, omigaZ)) * t;
	float cos_o_kt = cos(o_kt);
	float sin_o_kt = sin(o_kt);
	float2 c_0 = float2(cos_o_kt, sin_o_kt);
	float2 c_1 = float2(cos_o_kt, -sin_o_kt);
	return float2(
		h0tilde_k.x*c_0.x - h0tilde_k.y*c_0.y + h0tilde_k_conj.x*c_1.x - h0tilde_k_conj.y*c_1.y,
		h0tilde_k.x*c_0.y + h0tilde_k.y*c_0.x + h0tilde_k_conj.x*c_1.y + h0tilde_k_conj.y*c_1.x
	);
}

float2 complexMultiplyFunc(float2 pCom1, float2 pCom2) {
	return float2(pCom1.x*pCom2.x-pCom1.y*pCom2.y, pCom1.x*pCom2.y+pCom1.y*pCom2.x);
}

//one horizontal fft for on one thread group
void caculateFFTFunc(int pCaculateIndex, uint pStride, uint pOffset) {
	uint heightM = 1;
	for (uint heightIndex = 1; heightIndex <= _Log2N; ++heightIndex) {
		heightM <<= 1;
		float2 omigaM = caculateExpXAndN(1, heightM);
		int maxK = _Dimension / heightM;
		for (int k = 0; k < maxK; ++k) {
			//float2 cacualteOmiga = float2(1, 0);

			int MDivide2 = heightM / 2;
			int offset = k * heightM;
			for (int j = 0; j < MDivide2; ++j) {
				int dataIndex0 = FFTRevertedIndexCache[j + offset] * pStride + pOffset;
				int dataIndex1 = FFTRevertedIndexCache[j + offset + MDivide2] * pStride + pOffset;
				float2 cacualteOmiga = caculateExpXAndN(j, heightM);

				float2 t = complexMultiplyFunc(cacualteOmiga, OutputBuff[dataIndex1].CaculateData[pCaculateIndex]);
				float2 u = OutputBuff[dataIndex0].CaculateData[pCaculateIndex];
				OutputBuff[dataIndex0].CaculateData[pCaculateIndex] = float2(t.x + u.x, t.y + u.y);
				OutputBuff[dataIndex1].CaculateData[pCaculateIndex] = float2(u.x - t.x, u.y - t.y);

				//cacualteOmiga = complexMultiplyFunc(cacualteOmiga, omigaM);
				//cacualteOmiga = caculateExpXAndN();
			}
		}
	}
}

//change input and output buff
[numthreads(4, 4, 1)]
void InitFFTWaves(uint3 id : SV_DispatchThreadID) {
	// TODO: insert actual code here!
	float2 posVer = id.xy;
	float2 heightVer = float2(0, 0);
	float2 displamentVer = float2(0, 0);
	float2 gradVer = float2(0, 0);

	float halfDim = _Dimension / 2;
	int zPrimeIndex = id.y;
	int xPrimeIndex = id.x;
	int mPrime = (int)(-halfDim + id.y);
	int nPrime = (int)(-halfDim + id.x);
	float omigaZ = PIMul2 * mPrime / _WaveLength;
	float omigaX = PIMul2 * nPrime / _WaveLength;

	float2 heightTilde = caculateHTildeFunc(omigaX, omigaZ, xPrimeIndex, zPrimeIndex, _CurrentTime);

	float par1 = dot(float2(omigaX, omigaZ), posVer);
	float cos_omiga = cos(par1);
	float sin_omiga = sin(par1);
	heightVer = float2(
		heightTilde.x*cos_omiga - heightTilde.y*sin_omiga,
		heightTilde.x*sin_omiga + heightTilde.y*cos_omiga);

	float sqroot = sqrt(mPrime * mPrime + nPrime * nPrime);
	if (abs(sqroot) < _Eplision)
		sqroot = 1;
	displamentVer.x = heightVer.y * nPrime / sqroot;
	displamentVer.y = heightVer.y * mPrime / sqroot;

	gradVer.x = heightVer.y * -nPrime / sqroot;
	gradVer.y = heightVer.y * -mPrime / sqroot;

	int pointIndex = id.y * _Dimension + id.x;
	OutputBuff[pointIndex].CaculateData[0] = heightVer;
	OutputBuff[pointIndex].CaculateData[1] = float2(displamentVer.x, 0);
	OutputBuff[pointIndex].CaculateData[2] = float2(displamentVer.y, 0);
	OutputBuff[pointIndex].CaculateData[3] = float2(gradVer.x, 0);
	OutputBuff[pointIndex].CaculateData[4] = float2(gradVer.y, 0);
}

//horizontal fft.
[numthreads(4,1,1)]
void HorizontalFFT(uint3 id : SV_DispatchThreadID) {
	// TODO: insert actual code here!
	caculateFFTFunc(0, 1, id.x * _Dimension);
	caculateFFTFunc(1, 1, id.x * _Dimension);
	caculateFFTFunc(2, 1, id.x * _Dimension);
	caculateFFTFunc(3, 1, id.x * _Dimension);
	caculateFFTFunc(4, 1, id.x * _Dimension);
}

//vertical fft.
[numthreads(4, 1, 1)]
void VerticalFFT(uint3 id : SV_DispatchThreadID) {
	// TODO: insert actual code here!
	caculateFFTFunc(0, _Dimension, id.x);
	caculateFFTFunc(1, _Dimension, id.x);
	caculateFFTFunc(2, _Dimension, id.x);
	caculateFFTFunc(3, _Dimension, id.x);
	caculateFFTFunc(4, _Dimension, id.x);
}
